# -*- python -*-
# ex: set filetype=python:

import os
from buildbot.plugins import *

# Dictionary that the buildmaster pays attention to
c = BuildmasterConfig = {}

# kernel configs to build, test and deploy
kernels=["std", "lts", "hardened", "zen", "vfio", "dkms"]

####### WORKERS

# The 'workers' list defines the set of recognized workers. Each element is
# a Worker object, specifying a unique worker name and password.  The same
# worker name and password must be configured on the worker.

# add 1 default worker
c['workers'] = [
    worker.Worker(
        "archzfs-worker", "At3iiquae3AeTaex3eoc")
]

# add one deploy worker
c['workers'].append(worker.Worker("archzfs-deploy", "At3iiquae3AeTaex3eoc"))

mainWorkers = ["archzfs-worker"]
allWorkers = mainWorkers + ["archzfs-deploy"]

# 'protocols' contains information about protocols which master will use for
# communicating with workers. You must define at least 'port' option that workers
# could connect to your master with this protocol.
# 'port' must match the value configured into the workers (with their
# --master option)
c['protocols'] = {'pb': {'port': 9989}}

####### CHANGESOURCES

# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes. We use github to tell buildbot about changes (c['www'] below)

c['change_source'] = []

####### SCHEDULERS
# Configure the Schedulers, which decide how to react to incoming changes

from schedulers import schedulers, reportSchedulerNames
c['schedulers'] = schedulers

####### BUILDERS
# The 'builders' list defines the Builders, which tell Buildbot how to perform a build:
# what steps, and which workers can execute them.  Note that any particular build will
# only take place on one worker.

# prevent multiple instances of pacman
buildLock = util.WorkerLock("pacman_lock")

# default builders
from builders import getBuilders
c['builders'] = getBuilders(allWorkers, mainWorkers, kernels, buildLock)

# deploy builders
enableDeploy = os.environ.get("ENABLE_DEPLOY", "false")  == "true"
if enableDeploy:
    from deploy_builders import getDeployBuilders, reportBuilderNames
    c['builders'] = c['builders'] + getDeployBuilders(kernels, buildLock)
else:
    reportBuilderNames = []

####### BUILDBOT SERVICES

# 'services' is a list of BuildbotService items like reporter targets. The
# status of each build will be pushed to these targets. buildbot/reporters/*.py
# has a variety to choose from, like IRC bots.

from reporters import getReporters
c['services'] = getReporters(reportSchedulerNames, reportBuilderNames)

####### PROJECT IDENTITY

# the 'title' string will appear at the top of this buildbot installation's
# home pages (linked to the 'titleURL').

c['title'] = "archzfs"
c['titleURL'] = "https://github.com/" + os.environ.get("GITHUB_REPO", "archzfs/archzfs")

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server is visible. This typically uses the port number set in
# the 'www' entry below, but with an externally-visible host name which the
# buildbot cannot figure out without some help.

c['buildbotURL'] = os.environ.get("MASTER_URL", "http://localhost:8080")

# config to activate new web UI
c['www'] = dict(port=8080,
                change_hook_dialects={
                    'github': {
                        'secret': os.environ.get("GITHUB_HOOK_SECRET", ""),
                        'strict': True,
                    },
                })

# authentication
from auth import auth, authz
c['www']['authz'] = authz
c['www']['auth'] = auth

# enable some plugins
c['www']['plugins'] = {
    'badges': {
        "style": "flat"
    },
    'console_view': True,
    'waterfall_view': True,
    'grid_view': True
};

####### DB URL

c['db'] = {
    # This specifies what database buildbot uses to store its state.  You can leave
    # this at its default for all but the largest installations.
    'db_url' : os.environ.get("BUILDBOT_DB_URL", "sqlite://").format(**os.environ),
}

c['buildbotNetUsageData'] = 'basic'
