# -*- python -*-
# ex: set filetype=python:

import os

from buildbot.plugins import *

# This is a buildmaster config file. It must be installed as
# 'master.cfg' in your buildmaster's base directory.

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

# kernel configs to build, test and deploy
kernels=["std", "lts", "hardened", "zen", "dkms"]

enableDeploy = os.environ.get("ENABLE_DEPLOY", "false")  == "true"
enableGithubLogin = os.environ.get("ENABLE_GITHUB_LOGIN", "false")  == "true"

####### WORKERS

# The 'workers' list defines the set of recognized workers. Each element is
# a Worker object, specifying a unique worker name and password.  The same
# worker name and password must be configured on the worker.

# add 1 worker
workerNames = ["archzfs-worker"]
c['workers'] = [
    worker.Worker(
        "archzfs-worker", "At3iiquae3AeTaex3eoc",
        max_builds=1)
]

# add the deploy worker
c['workers'].append(worker.Worker("archzfs-deploy", "At3iiquae3AeTaex3eoc",
                                  max_builds=1))

# 'protocols' contains information about protocols which master will use for
# communicating with workers. You must define at least 'port' option that workers
# could connect to your master with this protocol.
# 'port' must match the value configured into the workers (with their
# --master option)
c['protocols'] = {'pb': {'port': 9989}}

####### CHANGESOURCES

# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes.  Here we point to the archzfs repo

c['change_source'] = []
c['change_source'].append(changes.GitPoller(
        'git://github.com/' + os.environ.get("GITHUB_REPO", "archzfs/archzfs") + '.git',
        workdir='gitpoller-workdir',
        branches=True,
        pollinterval=300))

####### BUILDERS
#######
# The 'builders' list defines the Builders, which tell Buildbot how to perform a build:
# what steps, and which workers can execute them.  Note that any particular build will
# only take place on one worker.
c['builders'] = []

#
# generate compile builder
#

build = util.BuildFactory();
# step 1: git update
build.addStep(steps.Git(
    repourl='git://github.com/' + os.environ.get("GITHUB_REPO", "archzfs/archzfs") + '.git',
    mode='full',
    method='copy',
    haltOnFailure=True))

# step 2: adjust config file, delete all previous build packages
build.addStep(steps.ShellCommand(
    name="prepare working directory",
    command="sed -i 's/demizer/buildbot/' conf.sh && sudo ccm64 d || true"))

# step 3: run 'build.sh all update' to generate all PKGBUILDs
build.addStep(steps.ShellCommand(
    name="build.sh all update",
    command="sudo bash build.sh -d -u all update",
    haltOnFailure=True,
    description="Generate all PKGBUILDs"))

# step 4: run 'build.sh common make' to compile common packages
build.addStep(steps.ShellCommand(
    name="build.sh common make",
    command="sudo bash build.sh -d common make",
    haltOnFailure=True,
    description="Compile common packages"))

# step 5: run 'build.sh common-git make' to compile common-git packages
build.addStep(steps.ShellCommand(
    name="build.sh common-git make",
    command="sudo bash build.sh -d common-git make",
    haltOnFailure=True,
    description="Compile common-git packages"))

for idx,kernel in enumerate(kernels):
    # run 'build.sh kernel make' to compile packages for this kernel
    build.addStep(steps.ShellCommand(
        name="build.sh %s make" %(kernel),
        command="sudo bash build.sh -d %s make" %(kernel),
        haltOnFailure=True,
        description="Compile %s packages" %(kernel)))

c['builders'].append(util.BuilderConfig(
    name="compile",
    workernames=workerNames,
    workerbuilddir="all-kernels",
    factory=build))

allBuilders = ['compile'];

#
# generate the deploy builder
#
if enableDeploy:
    deploy = util.BuildFactory()

    # git update
    deploy.addStep(steps.Git(
        repourl='git://github.com/' + os.environ.get("GITHUB_REPO", "archzfs/archzfs") + '.git',
        mode='incremental',
        haltOnFailure=True))

    # adjust config file
    remoteServer = os.environ.get("REMOTE_REPO_SERVER", "")
    remotePath = os.environ.get("REMOTE_REPO_PATH", "")
    remoteRepoBasename = os.environ.get("REMOTE_REPO_BASENAME", "")
    deploy.addStep(steps.ShellCommand(
        name="adjust config file",
        command="bash /worker/update-config.sh '%s' '%s' '%s' \
                " %(remoteServer, remotePath, remoteRepoBasename)))

    # generate all PKGBUILDs
    deploy.addStep(steps.ShellCommand(
        name="build.sh all update",
        command="sudo bash build.sh -u -d all update",
        haltOnFailure=True,
        description="Generate PKGBUILDs"))

    # run 'build.sh common common-git make' to compile common packages
    deploy.addStep(steps.ShellCommand(
        name="build.sh common common-git make",
        command="sudo bash build.sh -d common common-git make",
        haltOnFailure=True,
        description="Compile common packages"))

    # build all kernels
    for idx,kernel in enumerate(kernels):
        # run 'build.sh kernel make' to compile packages
        deploy.addStep(steps.ShellCommand(
            name="build.sh %s make" %(kernel),
            command="sudo bash build.sh -d %s make" %(kernel),
            haltOnFailure=True,
            description="Compile %s packages" %(kernel)))

    # add packages to repo
    deploy.addStep(steps.ShellCommand(
        name="repo.sh all azfs",
        command="bash repo.sh -d all azfs",
        haltOnFailure=True,
        description="Add packages to repo"))

    # push packages to remote repo
    deploy.addStep(steps.ShellCommand(
        name="push.sh -r",
        command="bash push.sh -r -d",
        haltOnFailure=True,
        description="Push packages to remote repo"))

    c['builders'].append(
        util.BuilderConfig(name="deploy",
                           workernames="archzfs-deploy",
                           workerbuilddir="deploy",
                           factory=deploy))


####### SCHEDULERS

# Configure the Schedulers, which decide how to react to incoming changes
c['schedulers'] = []

# build and test all packages if changes accour on any branch or pull request
c['schedulers'].append(schedulers.AnyBranchScheduler(
    name="github any branch",
    treeStableTimer=10,
    builderNames= allBuilders))

# add force button in user interface
c['schedulers'].append(schedulers.ForceScheduler(
    name="force",
    builderNames=allBuilders))

# deploy schedulers
if enableDeploy:
    # force deploy button
    c['schedulers'].append(schedulers.ForceScheduler(
        name="force-deploy",
        builderNames=['deploy']))

    # deploy when changes to master occour
    c['schedulers'].append(schedulers.SingleBranchScheduler(
        name="github master deploy",
        change_filter=util.ChangeFilter(branch='master'),
        treeStableTimer=10,
        builderNames=['deploy']))

    # deploy once a day
    c['schedulers'].append(schedulers.Nightly(
        name='daily deploy',
        change_filter=util.ChangeFilter(branch='master'),
        builderNames=['deploy'],
        hour=3, minute=0))

####### BUILDBOT SERVICES

# 'services' is a list of BuildbotService items like reporter targets. The
# status of each build will be pushed to these targets. buildbot/reporters/*.py
# has a variety to choose from, like IRC bots.

c['services'] = []

# github status reporter
from buildbot.plugins import reporters, util

context = util.Interpolate("buildbot/%(prop:buildername)s")
gs = reporters.GitHubStatusPush(token=os.environ.get("GITHUB_TOKEN", ""),
                                context=context,
                                startDescription='Build started.',
                                endDescription='Build done.')
c['services'].append(gs)

####### PROJECT IDENTITY

# the 'title' string will appear at the top of this buildbot installation's
# home pages (linked to the 'titleURL').

c['title'] = "archzfs CI"
c['titleURL'] = "https://github.com/" + os.environ.get("GITHUB_REPO", "archzfs/archzfs")

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server is visible. This typically uses the port number set in
# the 'www' entry below, but with an externally-visible host name which the
# buildbot cannot figure out without some help.

c['buildbotURL'] = os.environ.get("MASTER_URL", "https://ci.archzfs.com")

# config to activate new web UI
c['www'] = dict(port=8080,
                plugins=dict(waterfall_view={}, console_view={}, grid_view={}),
                change_hook_dialects={
                    'github': {
                        'secret': os.environ.get("GITHUB_HOOK_SECRET", ""),
                        'strict': True,
		             },
                })

# authentication using github
if enableGithubLogin:
    githubGroupPrefix = os.environ.get("GITHUB_GROUP_PREFIX", "archzfs/")
    githubGroupRole = os.environ.get("GITHUB_GROUP_ROLE", "Owners")
    githubClientId = os.environ.get("GITHUB_CLIENT_ID", "")
    githubClientSecret = os.environ.get("GITHUB_CLIENT_SECRET", "")

    c['www']['authz'] = util.Authz(
        allowRules = [
            util.AnyControlEndpointMatcher(role=githubGroupRole)
        ],
        roleMatchers=[
            util.RolesFromGroups(groupPrefix=githubGroupPrefix)
        ]
    )

    c['www']['auth'] = util.GitHubAuth(
        githubClientId,
        githubClientSecret,
        apiVersion=4,
        getTeamsMembership=True
    )
# authentication using an admin user
else:
    adminName = os.environ.get("ADMIN_NAME", "")
    adminPassword = os.environ.get("ADMIN_PASSWORD", "")

    c['www']['authz'] = util.Authz(
        allowRules = [
            util.AnyControlEndpointMatcher(role="admin")
        ],
        roleMatchers = [
            util.RolesFromUsername(roles=['admin'], usernames=[adminName])
        ]
    )
    c['www']['auth'] = util.UserPasswordAuth({adminName: adminPassword})

# add support for badges
c['www']['plugins'] = {'badges': {
    "style": "flat"
}};

####### DB URL

c['db'] = {
    # This specifies what database buildbot uses to store its state.  You can leave
    # this at its default for all but the largest installations.
    'db_url' : os.environ.get("BUILDBOT_DB_URL", "sqlite://").format(**os.environ),
}

c['buildbotNetUsageData'] = 'basic'
