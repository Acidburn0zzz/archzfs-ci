# -*- python -*-
# ex: set filetype=python:

import os

from buildbot.plugins import *

# kernel configs to build
kernels=["std", "lts", "hardened", "zen", "dkms"]

# This is a sample buildmaster config file. It must be installed as
# 'master.cfg' in your buildmaster's base directory.

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

####### WORKERS

# The 'workers' list defines the set of recognized workers. Each element is
# a Worker object, specifying a unique worker name and password.  The same
# worker name and password must be configured on the worker.
c['workers'] = [worker.Worker("archzfs-worker", "At3iiquae3AeTaex3eoc",
                              max_builds=1)
]

# 'protocols' contains information about protocols which master will use for
# communicating with workers. You must define at least 'port' option that workers
# could connect to your master with this protocol.
# 'port' must match the value configured into the workers (with their
# --master option)
c['protocols'] = {'pb': {'port': 9989}}

####### CHANGESOURCES

# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes.  Here we point to the buildbot version of a python hello-world project.

c['change_source'] = []
c['change_source'].append(changes.GitPoller(
        'git://github.com/' + os.environ.get("GITHUB_REPO", "archzfs/archzfs") + '.git',
        workdir='gitpoller-workdir',
        branches=True,
        pollinterval=300))

####### SCHEDULERS

# Configure the Schedulers, which decide how to react to incoming changes

c['schedulers'] = []
c['schedulers'].append(schedulers.SingleBranchScheduler(
                            name="master",
                            change_filter=util.ChangeFilter(branch='master'),
                            treeStableTimer=None,
                            builderNames=kernels))
c['schedulers'].append(schedulers.ForceScheduler(
                            name="force",
                            builderNames=kernels))

####### BUILDERS
#######
# The 'builders' list defines the Builders, which tell Buildbot how to perform a build:
# what steps, and which workers can execute them.  Note that any particular build will
# only take place on one worker.

def generateBuildFactory(kernel):
    # step 1: git update
    gitUpdate = steps.Git(repourl='git://github.com/' + os.environ.get("GITHUB_REPO", "archzfs/archzfs") + '.git',
                          mode='incremental',
                          haltOnFailure=True)

    # step 2: fix config file
    configFix = steps.ShellCommand(name="adjust config file",
                                   command="sed -i 's/demizer/buildbot/' conf.sh")

    # step 3: run 'build.sh common update' to generate common PKGBUILDs
    commonUpdate = steps.ShellCommand(name="build.sh common update",
                                      command="sudo bash build.sh -d common update",
                                      haltOnFailure=True,
                                      description="Generate common PKGBUILDs")

    # step 4: run 'build.sh common make' to compile common packages
    commonMake = steps.ShellCommand(name="build.sh common make",
                                    command="sudo bash build.sh -d common make -u",
                                    haltOnFailure=True,
                                    description="Compile common packages")

    # step 5: run 'build.sh common-git update' to generate common-git PKGBUILDs
    commonGitUpdate = steps.ShellCommand(name="build.sh common-git update",
                                         command="sudo bash build.sh -d common-git update",
                                         haltOnFailure=True,
                                         description="Generate common-git PKGBUILDs")

    # step 6: run 'build.sh common-git make' to compile common-git packages
    commonGitMake = steps.ShellCommand(name="build.sh common-git make",
                                       command="sudo bash build.sh -d common-git make -u",
                                       haltOnFailure=True,
                                       description="Compile common-git packages")

    # step 7: run 'build.sh kernel update' to generate PKGBUILDs
    buildUpdate = steps.ShellCommand(name="build.sh update",
                                     command="sudo bash build.sh -d %s update" %(kernel),
                                     haltOnFailure=True,
                                     description="Generate PKGBUILDs")

    # step 8: run 'build.sh kernel make' to compile packages
    buildMake = steps.ShellCommand(name="build.sh make",
                                   command="sudo bash build.sh -d %s make -u" %(kernel),
                                   haltOnFailure=True,
                                   description="Compile packages")

    build = util.BuildFactory()
    build.addStep(gitUpdate)
    build.addStep(configFix)
    build.addStep(commonUpdate)
    build.addStep(commonMake)
    build.addStep(commonGitUpdate)
    build.addStep(commonGitMake)
    build.addStep(buildUpdate)
    build.addStep(buildMake)

    return build

# generate builders for all kernels
c['builders'] = []
for kernel in kernels:
    c['builders'].append(
        util.BuilderConfig(name=kernel,
                           workernames=["archzfs-worker"],
                           workerbuilddir="all-kernels",
                           factory=generateBuildFactory(kernel)))

####### BUILDBOT SERVICES

# 'services' is a list of BuildbotService items like reporter targets. The
# status of each build will be pushed to these targets. buildbot/reporters/*.py
# has a variety to choose from, like IRC bots.

c['services'] = []

# github status reporter
from buildbot.plugins import reporters, util

context = util.Interpolate("buildbot/%(prop:buildername)s")
gs = reporters.GitHubStatusPush(token=os.environ.get("GITHUB_TOKEN", ""),
                                context=context,
                                startDescription='Build started.',
                                endDescription='Build done.')
c['services'].append(gs)

####### PROJECT IDENTITY

# the 'title' string will appear at the top of this buildbot installation's
# home pages (linked to the 'titleURL').

c['title'] = "archzfs CI"
c['titleURL'] = "https://github.com/" + os.environ.get("GITHUB_REPO", "archzfs/archzfs")

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server is visible. This typically uses the port number set in
# the 'www' entry below, but with an externally-visible host name which the
# buildbot cannot figure out without some help.

c['buildbotURL'] = os.environ.get("MASTER_URL", "https://ci.archzfs.com")

# minimalistic config to activate new web UI
c['www'] = dict(port=8080,
                plugins=dict(waterfall_view={}, console_view={}, grid_view={}),
                change_hook_dialects={
                    'github': {
                        'secret': os.environ.get("GITHUB_HOOK_SECRET", ""),
                        'strict': True,
		    },
                })

####### DB URL

c['db'] = {
    # This specifies what database buildbot uses to store its state.  You can leave
    # this at its default for all but the largest installations.
    'db_url' : os.environ.get("BUILDBOT_DB_URL", "sqlite://").format(**os.environ),
}
